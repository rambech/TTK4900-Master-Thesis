from pygame import Surface, image, transform
from vehicle import Vehicle
import numpy as np
from utils import R2D, N2S, N2S2D, D2L

# TODO: Add comments and descriptions
# TODO: Make maps that are autogenerated
#       Some ground rules:
#           - The map is always the same size
#           - The px/m scale is always the same
#           - The quay can vary in size
#           - The quay must be at the edges of the map
#           - The bounds are always at the edges of the map
# TODO: Add static obstacles that the boat has to dock in between,
#       use a new grey version of Target() for this
# TODO: Change colliding edge to be determined by which edge is closed to the center of the map
# TODO: Define all maps and obstacles in {n} then scale them
# TODO: Change target to take in a vehicle object


class Target():
    def __init__(self, eta_d: np.ndarray, vehicle: Vehicle, map_origin: float) -> None:
        """
        Displays and holds target pose properties

        Parameters
        ----------
        eta_d : np.ndarray
            Is the desired pose in {n} frame
        vehicle : Vehicle
            The vehicle object that will be passed to the simulator
        scale: float
            Scaling to fit screen   [px/m]
        map_origin: float
            x, y distance from top left corner to the center
            of the game screen

        Attributes
        ----------
        image : pygame.image
            Visualisation of target pose
        rect : pygame.Rect
            Hitbox of the target pose
        eta_d : np.ndarray
            Desired pose in {n} frame
        """
        scale = vehicle.scale
        L = vehicle.L
        B = vehicle.B

        # Use screen coordinates for rendering
        eta_ds = N2S(eta_d, scale, map_origin)
        target_image = image.load(
            'vehicle/images/target.png')
        target_image = transform.scale(
            target_image, (scale*B, scale*L))
        self.image = transform.rotate(
            target_image, -R2D(eta_ds[-1]))

        center = (eta_ds[0], eta_ds[1])
        self.rect = self.image.get_rect(center=center)
        self.eta_d = eta_d.copy()  # Save desired pose


class Map():
    # Map parameters
    BOX_WIDTH = 500     # [px]  Overall box width
    BOX_LENGTH = 500    # [px]  Overall box length/height
    WALL_THICKNESS = 2  # [m]   Border wall thickness
    scale = 30
    # [px, px, p] Screen offset
    origin = np.array([BOX_WIDTH/2, BOX_LENGTH/2, 0], float)
    MAP_SIZE = (30, 30)                 # [m]    Size of map

    def __init__(self, convex_set: list = None) -> None:
        self.convex_set = convex_set
